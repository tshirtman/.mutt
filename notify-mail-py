#!/usr/bin/env python3
# coding: utf8
# python mail notifier, parses the mailboxes for messages ind "new" and
# display a preview in a notification box

from sys import argv
from os import listdir, stat
from os.path import exists
from glob import glob
from time import time
import notify2
import email
import re

if len(argv) < 2:
    print("usage {} maildir [account] [box] [max_age] [multiple]")
    print("""
    will look for new messages in maildir, allow filtering by account
    and box (default to INBOX), then maximum age (default to 0, which
    means no filtering). A notification is displayed with the number of
    new mails, and a preview of the most recent ones.

    if multiple is passed, then one notification will be generated for
    each message.
    """)
    exit(1)


def shorten_body(text):
    return re.sub('<[^>]*>', '', text)[:100] + 'â€¦'


maildir = argv[1]
account = box = '*'
box = 'INBOX'
max_age = 0
multiple = False

if len(argv) > 2:
    account = argv[2]

if len(argv) > 3:
    box = argv[3]

if len(argv) > 4:
    max_age = time() - float(argv[4])

if len(argv) > 5:
    multiple = argv[5] == 'multiple'

new = {
    x: len(listdir(x))
    for x in glob('{}/{}/{}/new'.format(maildir, account, box))
    if not max_age or stat(x).st_ctime > max_age
}

if sum(new.values()):
    notify2.init('mailsync')
    for b, n in new.items():
        message = []
        if not n:
            continue

        # start from last, because we won't show everything
        for i, m in enumerate(listdir(b)[::-1]):
            if i > 5:
                break

            fn = '{}/{}'.format(b, m)
            if not exists(fn):
                # could be in "cur" and thus *not* new, or tmp, then we
                # don't care
                continue

            with open(fn) as body:
                try:
                    mail = email.message_from_file(body)
                except UnicodeDecodeError:
                    if multiple:
                        message.append(('error', 'error', 'error'))
                    else:
                        # only show start of message
                        message.append('{}|{}'.format('error', '...'))
                    continue

                text = mail.get_payload()
                sender = email.utils.parseaddr(mail.get('From'))[1]
                obj = email.header.decode_header(mail.get('Subject'))[0]
                try:
                    obj = obj[0].decode(obj[1])
                except:
                    obj = obj[0]

                while isinstance(text, list):
                    text = text[0].get_payload()

                if multiple:
                    message.append((sender, obj, text))
                else:
                    # only show start of message
                    message.append('{}|{}'.format(sender[:10], text[:100]))

        if multiple:
            for sender, obj, text in message:
                n = notify2.Notification(
                    '{sender}: {obj}'.format(sender=sender, obj=obj),
                    '{text}'.format(text=shorten_body(text))
                )
                n.show()

        else:
            notification = notify2.Notification(
                '{} new mail{} in {}'.format(
                    n, 's' if n > 1 else '', b[len(maildir):-len('/new')]
                ),
                '\n'.join(message),
                '/usr/share/icons/ubuntu-mobile/actions/scalable/email.svg'
            )

            notification.show()
